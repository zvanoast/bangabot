name: Pull Request Test Environment

on:
  pull_request:
    branches:
      - master
    types: [opened, synchronize, reopened]
  workflow_dispatch: # Allow manual triggering

jobs:
  test:
    name: Test Application
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Python 3.9
        uses: actions/setup-python@v3
        with:
          python-version: 3.9
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8
          pip install -r src/app/requirements.txt
      
      - name: Lint with flake8
        run: |
          # Only check for critical errors
          flake8 src/app/ --count --select=E9,F63,F7,F82 --show-source --statistics
          # Exit-zero treats all errors as warnings
          flake8 src/app/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  build:
    name: Build Docker Image
    needs: test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Build and export Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./src/app
          load: true
          tags: bangabot:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Test Docker image
        run: |
          docker images
          docker image inspect bangabot:${{ github.sha }}
  
  test-ssh-connection:
    name: Test SSH Connection
    needs: build
    runs-on: ubuntu-latest
    environment: Test
    
    steps:
      - name: Prepare SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.TEST_SERVER_SSH_KEY }}" > ~/.ssh/test_server_key
          chmod 600 ~/.ssh/test_server_key
          
          # Extract and print public key part (safe to show)
          ssh-keygen -y -f ~/.ssh/test_server_key > ~/.ssh/test_server_key.pub || echo "Failed to extract public key - check key format"
          echo "Public key fingerprint:"
          ssh-keygen -l -f ~/.ssh/test_server_key || echo "Failed to get fingerprint"
      
      - name: Test SSH Connection
        run: |
          echo "Testing connection to ${{ secrets.TEST_SERVER_HOST }} as user ${{ secrets.TEST_SERVER_USER }}..."
          ssh -i ~/.ssh/test_server_key -o StrictHostKeyChecking=no -o BatchMode=yes ${{ secrets.TEST_SERVER_USER }}@${{ secrets.TEST_SERVER_HOST }} "echo SSH connection successful && id && echo 'Current directory:' && pwd" || echo "SSH connection failed, check logs above"
  
  setup-test-server:
    name: Setup Test Server
    needs: test-ssh-connection
    runs-on: ubuntu-latest
    environment: Test
    
    steps:
      - name: Prepare SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.TEST_SERVER_SSH_KEY }}" > ~/.ssh/test_server_key
          chmod 600 ~/.ssh/test_server_key
      
      - name: Install Docker and Docker Compose
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.TEST_SERVER_HOST }}
          username: ${{ secrets.TEST_SERVER_USER }}
          key: ${{ secrets.TEST_SERVER_SSH_KEY }}
          timeout: 180s
          script: |
            echo "Installing Docker if not already installed..."
            
            # Check if Docker is already installed
            if ! command -v docker &> /dev/null; then
              echo "Docker not found, installing..."
              # Update package list
              sudo apt-get update
              
              # Install prerequisites
              sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common
              
              # Add Docker's official GPG key
              curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
              
              # Set up the Docker repository
              sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
              
              # Install Docker CE
              sudo apt-get update
              sudo apt-get install -y docker-ce docker-ce-cli containerd.io
              
              # Add the current user to the Docker group
              sudo usermod -aG docker $USER
              
              echo "Docker installed successfully!"
            else
              echo "Docker is already installed: $(docker --version)"
            fi
            
            # Install Docker Compose if not already installed
            if ! command -v docker compose &> /dev/null; then
              echo "Docker Compose not found, installing Docker Compose plugin..."
              
              # Install the compose plugin
              sudo apt-get update
              sudo apt-get install -y docker-compose-plugin
              
              # Test if the plugin installed correctly
              docker compose version
            else
              echo "Docker Compose is already installed: $(docker compose version)"
            fi
            
            # Ensure the Docker service is started
            sudo systemctl start docker
            sudo systemctl enable docker
            
            # Create the main directory for PR testing
            mkdir -p ~/bangabot_test
            
            echo "Docker and Docker Compose setup complete!"
  
  deploy-to-test-server:
    name: Deploy to Test Server
    needs: setup-test-server
    runs-on: ubuntu-latest
    environment: Test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Create PR-specific .env file
        run: |
          echo "TOKEN=${{ secrets.TEST_DISCORD_TOKEN }}" > .env.test
          echo "CODUSER=${{ secrets.CODUSER }}" >> .env.test
          echo "CODPASS=${{ secrets.CODPASS }}" >> .env.test
          echo "DBUSER=${{ secrets.TEST_DBUSER || 'postgres' }}" >> .env.test
          echo "DBPASS=${{ secrets.TEST_DBPASS || 'postgres' }}" >> .env.test
          echo "DBNAME=bangabot_pr_${{ github.event.pull_request.number }}" >> .env.test
          echo "DBPORT=5432" >> .env.test
          echo "DBHOST=db" >> .env.test
          
          # Add PR identifier to .env file for reference
          echo "PR_NUMBER=${{ github.event.pull_request.number }}" >> .env.test
          echo "PR_TITLE=${{ github.event.pull_request.title }}" >> .env.test
          echo "PR_URL=${{ github.event.pull_request.html_url }}" >> .env.test
      
      - name: Create PR-specific docker compose file
        run: |
          cat > docker-compose.pr${{ github.event.pull_request.number }}.yml << EOL
          version: '3'
          services:
            bangabot_pr${{ github.event.pull_request.number }}:
              build:
                context: ./src/app
                dockerfile: Dockerfile
              environment:
                DBHOST: db
                DBPORT: 5432
              env_file:
                - .env.test
              volumes:
                - ./src/img:/app/src/img
              depends_on:
                db:
                  condition: service_healthy
              restart: unless-stopped
              container_name: bangabot_pr${{ github.event.pull_request.number }}
              networks:
                - bangabot_network
            
            db:
              image: postgres
              environment:
                POSTGRES_USER: \${DBUSER}
                POSTGRES_PASSWORD: \${DBPASS}
                POSTGRES_DB: bangabot_pr_${{ github.event.pull_request.number }}
              healthcheck:
                test: ["CMD-SHELL", "pg_isready -U \${DBUSER}"]
                interval: 5s
                timeout: 5s
                retries: 5
              volumes:
                - pr${{ github.event.pull_request.number }}_db_data:/var/lib/postgresql/data
              container_name: bangabot_db_pr${{ github.event.pull_request.number }}
              networks:
                - bangabot_network
          
          networks:
            bangabot_network:
              name: bangabot_network
          
          volumes:
            pr${{ github.event.pull_request.number }}_db_data:
              name: bangabot_pr${{ github.event.pull_request.number }}_data
          EOL
      
      - name: Prepare SSH key for deployment
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.TEST_SERVER_SSH_KEY }}" > ~/.ssh/test_server_key
          chmod 600 ~/.ssh/test_server_key
      
      - name: Create directory on test server via SSH directly
        run: |
          ssh -i ~/.ssh/test_server_key -o StrictHostKeyChecking=no ${{ secrets.TEST_SERVER_USER }}@${{ secrets.TEST_SERVER_HOST }} "mkdir -p ~/bangabot_test/pr${{ github.event.pull_request.number }}/src/img"
      
      - name: Transfer files to test server
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.TEST_SERVER_HOST }}
          username: ${{ secrets.TEST_SERVER_USER }}
          key: ${{ secrets.TEST_SERVER_SSH_KEY }}
          source: ".env.test,docker-compose.pr${{ github.event.pull_request.number }}.yml,src/app/Dockerfile,src/app/main.py,src/app/requirements.txt,src/app/cogs/,src/app/database/,src/img/"
          target: "~/bangabot_test/pr${{ github.event.pull_request.number }}"
          strip_components: 0
      
      - name: Start PR environment
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.TEST_SERVER_HOST }}
          username: ${{ secrets.TEST_SERVER_USER }}
          key: ${{ secrets.TEST_SERVER_SSH_KEY }}
          timeout: 120s
          command_timeout: 300s  # Increased for container build time
          script: |
            cd ~/bangabot_test/pr${{ github.event.pull_request.number }}
            
            # Rename the .env.test file to .env
            mv .env.test .env
            
            # This may be needed if server was just rebooted or Docker service just started
            # Ensure we can connect to Docker
            timeout 30 sh -c 'until docker ps; do sleep 1; done'
            
            # Stop any existing containers for this PR
            if sudo docker compose -f docker-compose.pr${{ github.event.pull_request.number }}.yml ps | grep -q "bangabot"; then
              echo "Stopping existing PR environment..."
              sudo docker compose -f docker-compose.pr${{ github.event.pull_request.number }}.yml down
            fi
            
            # Build and start the PR environment
            echo "Starting PR environment..."
            sudo docker compose -f docker-compose.pr${{ github.event.pull_request.number }}.yml up -d --build
            
            # Verify containers are running
            sleep 20
            if [ $(sudo docker compose -f docker-compose.pr${{ github.event.pull_request.number }}.yml ps | grep "Up" | wc -l) -lt 2 ]; then
              echo "Not all containers are running"
              sudo docker compose -f docker-compose.pr${{ github.event.pull_request.number }}.yml logs
              exit 1
            fi
            
            echo "PR #${{ github.event.pull_request.number }} environment is now running"
      
      - name: Verify test environment
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.TEST_SERVER_HOST }}
          username: ${{ secrets.TEST_SERVER_USER }}
          key: ${{ secrets.TEST_SERVER_SSH_KEY }}
          script: |
            cd ~/bangabot_test/pr${{ github.event.pull_request.number }}
            echo "Container status:"
            sudo docker compose -f docker-compose.pr${{ github.event.pull_request.number }}.yml ps
            
            echo "Application logs:"
            sudo docker compose -f docker-compose.pr${{ github.event.pull_request.number }}.yml logs --tail=50 bangabot_pr${{ github.event.pull_request.number }}
      
      - name: Post deployment details to PR
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `✅ **Test environment deployed successfully!**
              
              Your PR test bot is now running on the test server and will remain active throughout the PR lifecycle.
              
              **PR Info:**
              - PR #${{ github.event.pull_request.number }}: ${{ github.event.pull_request.title }}
              - Test Bot is using Discord Token: \`${{ secrets.TEST_DISCORD_TOKEN }}\`
              
              **Containers:**
              - Bot: \`bangabot_pr${{ github.event.pull_request.number }}\`
              - Database: \`bangabot_db_pr${{ github.event.pull_request.number }}\`
              
              **Access:**
              You can check logs by connecting to the test server and running:
              \`\`\`
              sudo docker compose -f ~/bangabot_test/pr${{ github.event.pull_request.number }}/docker-compose.pr${{ github.event.pull_request.number }}.yml logs -f
              \`\`\`
              
              The test bot will remain active until this PR is closed. Updates to this PR will automatically redeploy the test environment.`
            })

  cleanup:
    name: Cleanup on PR Close
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    environment: Test
    
    steps:
      - name: Cleanup test environment
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.TEST_SERVER_HOST }}
          username: ${{ secrets.TEST_SERVER_USER }}
          key: ${{ secrets.TEST_SERVER_SSH_KEY }}
          script: |
            cd ~/bangabot_test/pr${{ github.event.pull_request.number }}
            
            # Stop and remove containers
            sudo docker compose -f docker-compose.pr${{ github.event.pull_request.number }}.yml down -v
            
            # Remove PR-specific volume
            sudo docker volume rm bangabot_pr${{ github.event.pull_request.number }}_data || true
            
            # Clean up files
            cd ~ && rm -rf ~/bangabot_test/pr${{ github.event.pull_request.number }}
            
            echo "Test environment for PR #${{ github.event.pull_request.number }} has been cleaned up"
      
      - name: Post cleanup notice to PR
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '🧹 **Test environment has been cleaned up.**\n\nAll containers, volumes, and files related to this PR have been removed from the test server.'
            })